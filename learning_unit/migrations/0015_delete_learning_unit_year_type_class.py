# Generated by Django 2.2.13 on 2021-06-04 15:37

from django.db import migrations


def get_learning_unit_year_of_type_class_queryset(apps):
    LearningUnitYear = apps.get_model('base', 'LearningUnitYear')
    return LearningUnitYear.objects.filter(
        acronym__regex=r'\w+[a-zA-Z]$',
        learning_container_year__isnull=True,
        subtype="FULL"
    ).select_related(
        "learning_container_year",
        "academic_year",
        "campus"
    ).order_by(
        "acronym",
        "academic_year__year"
    )


def delete_group_element_years(apps, luy):
    GroupElementYear = apps.get_model('base', 'GroupElementYear')
    qs = GroupElementYear.objects.filter(child_element__learning_unit_year=luy).select_related('child_element')
    for gey in qs:
        gey.delete()


def delete_element(apps, luy):
    Element = apps.get_model('program_management', 'Element')
    qs = Element.objects.filter(learning_unit_year=luy)
    for element in qs:
        element.delete()


def delete_class_from_learning_unit_year(apps, schema_editor):
    print("Populate learning class year table")
    LearningComponentYear = apps.get_model('base', 'LearningComponentYear')

    qs = get_learning_unit_year_of_type_class_queryset(apps)

    errors = []
    for luy in qs:
        try:
            delete_group_element_years(apps, luy)
            delete_element(apps, luy)
            # luy.delete()

        except Exception as e:
            print("ERROR :: {} {}".format(str(luy), str(e)))
            errors.append(luy)


class Migration(migrations.Migration):
    dependencies = [
        ('learning_unit', '0014_auto_20210604_1537'),
    ]

    operations = [
        migrations.RunPython(delete_class_from_learning_unit_year),
    ]

# Generated by Django 2.2.13 on 2021-06-04 15:37

from django.db import IntegrityError
from django.db import migrations

"""
    Migrate Learning Unit Year of type class to Learning Class Year 
"""


def get_learning_unit_year_of_type_class_queryset(apps):
    LearningUnitYear = apps.get_model('base', 'LearningUnitYear')
    return LearningUnitYear.objects.filter(
        acronym__regex=r'\w+[a-zA-Z]$',
        subtype="FULL"
    ).select_related(
        "learning_container_year",
        "academic_year",
        "campus"
    ).order_by(
        "acronym",
        "academic_year__year"
    )


def fetch_component_year_for_class(apps, luy):
    LearningComponentYear = apps.get_model('base', 'LearningComponentYear')

    lecturing_component = LearningComponentYear.objects.select_related(
        'learning_unit_year'
    ).get(
        learning_unit_year__acronym=luy.acronym[:-1],
        learning_unit_year__academic_year=luy.academic_year,
        type="LECTURING",
    )
    practical_component = LearningComponentYear.objects.select_related(
        'learning_unit_year'
    ).get(
        learning_unit_year__acronym=luy.acronym[:-1],
        learning_unit_year__academic_year=luy.academic_year,
        type="PRACTICAL_EXERCISES",
    )
    if not lecturing_component.hourly_volume_total_annual and practical_component.hourly_volume_total_annual:
        return practical_component
    return lecturing_component


def fetch_campus_for_class(apps, luy):
    """
    Fetch campus of parent Learning Unit Year. If parent has no campus then assign campus of Louvain-la-Neuve.
    """
    LearningUnitYear = apps.get_model('base', 'LearningUnitYear')
    return LearningUnitYear.objects.only("campus").get(
        acronym=luy.acronym[:-1],
        academic_year=luy.academic_year
    ).campus or fetch_lln_campus(apps)


def fetch_lln_campus(apps):
    Campus = apps.get_model('base', 'Campus')
    return Campus.objects.get(name='Louvain-la-Neuve')


def convert_learning_unit_year_to_class(apps, luy, component_year, campus):
    LearningClassYear = apps.get_model('learning_unit', 'LearningClassYear')
    return LearningClassYear(
        acronym=luy.acronym[-1],
        title_fr=luy.specific_title or "",
        title_en=luy.specific_title_english or "",
        hourly_volume_partial_q1=component_year.hourly_volume_partial_q1,
        hourly_volume_partial_q2=component_year.hourly_volume_partial_q2,
        quadrimester=luy.quadrimester,
        session=luy.session,
        campus=campus,
        learning_component_year=component_year,
    )


def migrate_enrollments_to_class(apps, luy, class_luy):
    LearningUnitEnrollment = apps.get_model('base', 'LearningUnitEnrollment')
    ExamEnrollment = apps.get_model('base', 'ExamEnrollment')

    qs = LearningUnitEnrollment.objects.filter(learning_unit_year=luy)
    for enrollment in qs:
        try:
            update_enrollment_to_class_enrollment(enrollment, class_luy)
            enrollment.save()
        except IntegrityError:
            for exam_enrollment in ExamEnrollment.objects.filter(learning_unit_enrollment=enrollment):
                exam_enrollment.delete()
            enrollment.delete()


def update_enrollment_to_class_enrollment(luy_enrollment, class_luy):
    luy_enrollment.learning_class_year = class_luy
    luy_enrollment.learning_unit_year = class_luy.learning_component_year.learning_unit_year
    return luy_enrollment


def delete_group_element_years(apps, luy):
    GroupElementYear = apps.get_model('base', 'GroupElementYear')
    qs = GroupElementYear.objects.filter(child_element__learning_unit_year=luy).select_related('child_element')
    for gey in qs:
        gey.delete()


def delete_element(apps, luy):
    Element = apps.get_model('program_management', 'Element')
    qs = Element.objects.filter(learning_unit_year=luy)
    for element in qs:
        element.delete()


def convert_attribution_to_class_attribution(apps, charge, class_year):
    AttributionClass = apps.get_model('attribution', 'AttributionClass')
    return AttributionClass(
        attribution_charge=charge,
        learning_class_year=class_year,
        allocation_charge=charge.allocation_charge
    )


def create_class_score_responsible(apps, class_year, tutor):
    ScoreResponsible = apps.get_model('assessments', 'ScoreResponsible')
    ScoreResponsible(
        learning_class_year=class_year,
        tutor=tutor,
        learning_unit_year=None
    ).save()


def migrate_attributions_to_class_attributions(apps, component_year, class_year):
    AttributionChargeNew = apps.get_model('attribution', 'AttributionChargeNew')
    qs = AttributionChargeNew.objects.filter(learning_component_year=component_year).select_related("attribution")
    for charge in qs:
        attrib_class = convert_attribution_to_class_attribution(apps, charge, class_year)
        attrib_class.save()
        if charge.attribution.score_responsible:
            create_class_score_responsible(apps, class_year, charge.attribution.tutor)


def create_class_from_learning_unit_year(apps, schema_editor):
    LearningComponentYear = apps.get_model('base', 'LearningComponentYear')

    qs = get_learning_unit_year_of_type_class_queryset(apps)

    errors = []
    for luy in qs:
        try:
            component_year = fetch_component_year_for_class(apps, luy)
            campus = fetch_campus_for_class(apps, luy)

            class_year = convert_learning_unit_year_to_class(apps, luy, component_year, campus)
            class_year.save()

            migrate_attributions_to_class_attributions(apps, component_year, class_year)
            migrate_enrollments_to_class(apps, luy, class_year)
            delete_group_element_years(apps, luy)
            delete_element(apps, luy)

            # luy.delete()

        except LearningComponentYear.DoesNotExist:
            errors.append(luy)

    print('Learning Unit Year does not exist for: \n{}'.format(
        "\n".join([str(luy) for luy in errors])
    ))
    print(
        "Course errors: \n{}".format(
            "\n".join([str(luy.pk) for luy in errors if luy.learning_container_year.container_type == 'COURSE'])
        ))


class Migration(migrations.Migration):
    dependencies = [
        ('learning_unit', '0014_auto_20210604_1537'),
    ]

    operations = [
        migrations.RunPython(create_class_from_learning_unit_year),
    ]

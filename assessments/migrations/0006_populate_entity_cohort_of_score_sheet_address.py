# Generated by Django 2.2.13 on 2021-08-31 10:20

from django.db import migrations
from django.db.models import Prefetch, OuterRef, Exists

ACADEMIC_YEAR = 2021


def get_ucl_structure_with_address():
    from base.models.entity_version import EntityVersion
    cte = EntityVersion.objects.with_parents(
        acronym='UCL'
    )
    entity_ids_with_children = cte.queryset().with_cte(cte)
    return {row['entity_id']: row for row in entity_ids_with_children}


def get_score_sheet_address_to_populate_entity_field_queryset(apps):
    EducationGroupYear = apps.get_model("base", "EducationGroupYear")
    ScoreSheetAddress = apps.get_model("assessments", "ScoreSheetAddress")

    education_group_year_prefetch = EducationGroupYear.objects.filter(
        academic_year__year=ACADEMIC_YEAR
    ).select_related(
        "administration_entity",
        "management_entity"
    )
    return ScoreSheetAddress.objects.filter(
        entity_address_choice__isnull=False
    ).prefetch_related(
        Prefetch(
            "education_group__educationgroupyear_set",
            queryset=education_group_year_prefetch,
            to_attr="education_group_years"
        )
    )


def fill_entity_field(apps, address, ucl_structure):
    management_entity = address.education_group.education_group_years[0].management_entity
    administration_entity = address.education_group.education_group_years[0].administration_entity
    if address.entity_address_choice == "ENTITY_MANAGEMENT":
        address.entity = management_entity
    elif address.entity_address_choice == "ENTITY_ADMINISTRATION":
        address.entity = administration_entity
    elif address.entity_address_choice == "ENTITY_ADMINISTRATION_PARENT":
        address.entity = _get_parent_entity(apps, administration_entity, ucl_structure)
    elif address.entity_address_choice == "ENTITY_MANAGEMENT_PARENT":
        address.entity = _get_parent_entity(apps, management_entity, ucl_structure)
    else:
        raise Exception("Unrecognized entity address choice")

    latest_entity_version = address.entity.entityversion_set.order_by('start_date').last()
    address.recipient = "{} - {}".format(latest_entity_version.acronym, latest_entity_version.title)
    address.location = address.entity.location
    address.postal_code = address.entity.postal_code
    address.city = address.entity.city
    address.country = address.entity.country
    address.phone = address.entity.phone
    address.fax = address.entity.fax

    address.save()


def _get_parent_entity(apps, entity, ucl_structure):
    Entity = apps.get_model("base", "Entity")
    return Entity.objects.get(
        id=ucl_structure[entity.id]['parent_id']
    )


def populate_entity_field(apps, schema_editor):
    print("Fill entity field of score sheet addresses")
    ucl_structure = get_ucl_structure_with_address()
    addresses_to_fill_entity = get_score_sheet_address_to_populate_entity_field_queryset(apps)
    for address in addresses_to_fill_entity:
        try:
            fill_entity_field(apps, address, ucl_structure)
            print("- {}".format(address.id))
        except IndexError as e:
            print("- {} (error)".format(address.id))


def get_score_sheet_address_to_populate_cohort_name_field_queryset(apps):
    EducationGroupYear = apps.get_model("base", "EducationGroupYear")
    ScoreSheetAddress = apps.get_model("assessments", "ScoreSheetAddress")

    education_group_year_subqs = EducationGroupYear.objects.filter(
        academic_year__year=ACADEMIC_YEAR,
        acronym__icontains="11BA",
        education_group=OuterRef("education_group")
    )
    return ScoreSheetAddress.objects.annotate(
        of_first_year_bachelor=Exists(education_group_year_subqs)
    ).filter(
        of_first_year_bachelor=True
    )


def fill_cohort_field(address):
    address.cohort_name = "FIRST_YEAR"
    address.save()


def populate_cohort_field(apps, schema_editor):
    print("Fill cohort field of score sheet addresses")
    addresses_to_fill_cohort = get_score_sheet_address_to_populate_cohort_name_field_queryset(apps)
    for address in addresses_to_fill_cohort:
        fill_cohort_field(address)
        print("- {}".format(address.id))


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0005_scoresheetaddress_entity'),
    ]

    operations = [
        migrations.RunPython(
            populate_cohort_field
        ),
        migrations.RunPython(
            populate_entity_field
        ),
    ]

# Generated by Django 2.2.13 on 2021-02-08 09:48

from django.db import migrations
from django.db.models import Count, Prefetch, Min, Q, Max, F, Subquery, OuterRef


def fix_order(apps, schema_editor):
    Element = apps.get_model('program_management', 'Element')
    GroupElementYear = apps.get_model('base', 'GroupElementYear')

    parent_element_with_children_with_bad_order_values = Element.objects.filter(
        group_year__academic_year__year__gte=2019,
    ).annotate(
        number_children=Count("parent_elements"),
        min_child_order_value=Min("parent_elements__order"),
        max_child_order_value=Max("parent_elements__order")
    ).filter(
        Q(number_children__gt=0, min_child_order_value__gt=0) |
        Q(number_children__lte=F("max_child_order_value"))
    ).prefetch_related(
        Prefetch(
            "parent_elements",
            queryset=GroupElementYear.objects.order_by("order")
        )
    )

    for parent_element in parent_element_with_children_with_bad_order_values:
        for order_value, child in enumerate(parent_element.parent_elements.all()):
            print(f"{parent_element.id} - {child.id} ({child.order} -> {order_value})")
            child.order = order_value
            child.save()


def copy_group_element_years_order_of_2021_to_2022(apps, schema_editor):
    GroupElementYear = apps.get_model('base', 'GroupElementYear')

    qs = GroupElementYear.objects.filter(
        parent_element__group_year__academic_year__year=2022
    ).annotate(
        last_year_order=Subquery(
            GroupElementYear.objects.filter(
                Q(child_element__group_year__group__id=OuterRef("child_element__group_year__group__id")) |
                Q(child_element__learning_unit_year__learning_unit__id=OuterRef("child_element__learning_unit_year__learning_unit__id")),
                parent_element__group_year__group__id=OuterRef("parent_element__group_year__group__id"),
                parent_element__group_year__academic_year__year=2021,
                ).values("order")[:1]
        )
    ).exclude(
        order=F('last_year_order')
    )

    for grp in qs:
        print(f"{grp} ({grp.order} -> {grp.last_year_order})")
        grp.order = grp.last_year_order
        grp.save()


class Migration(migrations.Migration):
    dependencies = [
        ('base', '0622_person_curriculum'),
        ('program_management', '0010_auto_20210208_0948'),
    ]

    operations = [
        migrations.RunPython(fix_order, reverse_code=lambda *args, **kwargs: None, elidable=True),
        migrations.RunPython(
            copy_group_element_years_order_of_2021_to_2022,
            reverse_code=lambda *args, **kwargs: None,
            elidable=True
        )
    ]

openapi: 3.0.0
servers:
  - url: https://{environment}.osis.uclouvain.be/api/v1/offer_enrollment/
    variables:
      environment:
        default: dev
        enum:
          - dev # Development server
          - qa # Staging server
          - test # Test server
  - url: https://osis.uclouvain.be/api/v1/offer_enrollment/
    description: 'Production server'
info:
  version: '1.2'
  title: 'Offer Enrollment Service'
  description: |-
    A set of API endpoints that allow you to get information about offer enrollment
paths:
  /my_enrollments/:
    get:
      description: 'Return all enrollments of the connected user'
      operationId: my_enrollments_list
      parameters:
        - in: query
          name: enrollment_state
          schema:
            description: Filter result by specified offer enrollment states
            type: array
            items:
              type: string
          style: form
          explode: true
        - in: query
          name: year
          schema:
            description: Filter result by year
            type: integer
            example: 2020
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/X-User-FirstName'
        - $ref: '#/components/parameters/X-User-LastName'
        - $ref: '#/components/parameters/X-User-Email'
        - $ref: '#/components/parameters/X-User-GlobalID'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - enrollment
  /enrollments/{global_id}:
    get:
      description: 'Return all enrollments of a student specified by its global_id. If there are many students, service has to discriminate by valid offer enrollment'
      operationId: enrollments_list
      parameters:
        - in: path
          name: global_id
          required: true
          schema:
            description: '0123456789'
            type: string
        - in: query
          name: enrollment_state
          schema:
            description: Filter result by specified offer enrollment states
            type: array
            items:
              type: string
          style: form
          explode: true
        - in: query
          name: year
          schema:
            description: Filter result by year
            type: integer
            example: 2020
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/X-User-FirstName'
        - $ref: '#/components/parameters/X-User-LastName'
        - $ref: '#/components/parameters/X-User-Email'
        - $ref: '#/components/parameters/X-User-GlobalID'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - enrollment
components:
  securitySchemes:
    Token:
      type: apiKey
      in: header
      name: Authorization
      description: Enter your token in the format **Token &lt;token>**
  parameters:
    PaginationLimit:
      in: query
      name: limit
      description: Limit of paginated results
      schema:
        type: integer
        example: 25
    PaginationOffset:
      in: query
      name: offset
      description: Offset of paginated results
      schema:
        type: integer
        example: 25
    X-User-FirstName:
      in: header
      name: X-User-FirstName
      schema:
        type: string
      required: false
    X-User-LastName:
      in: header
      name: X-User-LastName
      schema:
        type: string
      required: false
    X-User-Email:
      in: header
      name: X-User-Email
      schema:
        type: string
      required: false
    X-User-GlobalID:
      in: header
      name: X-User-GlobalID
      schema:
        type: string
      required: false
    Accept-Language:
      in: header
      name: Accept-Language
      description: >
        The header advertises which languages the client is able to understand, and which locale variant is preferred. (By languages, we mean natural languages, such as English, and not programming languages.)
      schema:
        $ref: '#/components/schemas/AcceptedLanguageEnum'
      required: false
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Paging:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
    EnrollmentList:
      allOf:
        - $ref: '#/components/schemas/Paging'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Enrollment'
    Enrollment:
      type: object
      properties:
        acronym:
          type: string
          example: "FSA1BA"
        year:
          type: integer
          example: 2020
        title:
          type: string
          example: "Bachelier en Sciences de l'ing√©nieur"
          nullable: true
        student_registration_id:
          type: string
          example: "12345678"
    AcceptedLanguageEnum:
      type: string
      enum:
        - 'en'
        - 'fr-be'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
security:
  - Token: [ ]
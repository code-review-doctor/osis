# Generated by Django 2.2.13 on 2021-05-27 07:44

import base.models.enums.duration_unit
import base.models.group_element_year
import base.models.learning_component_year
import base.models.learning_unit_year
import ckeditor.fields
from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    replaces = [('base', '0001_initial'), ('base', '0002_auto_20160122_1023'), ('base', '0003_auto_20160122_1201'), ('base', '0004_auto_20160122_1431'), ('base', '0005_person_email'), ('base', '0006_examenrollmenthistory'), ('base', '0007_auto_20160209_1107'), ('base', '0008_auto_20160209_1659'), ('base', '0009_triggers_field_changed'), ('base', '0010_auto_20160210_2255'), ('base', '0011_offeryear_offer_parent'), ('base', '0012_triggers_field_changed'), ('base', '0014_auto_20160222_1124'), ('base', '0015_auto_20160223_0921'), ('base', '0016_auto_20160224_1039'), ('base', '0017_person_language'), ('base', '0018_auto_20160226_1138'), ('base', '0019_auto_20160303_0949'), ('base', '0020_auto_20160303_1043'), ('base', '0021_auto_20160306_2122'), ('base', '0022_auto_20160306_2249'), ('base', '0023_messagetemplate'), ('base', '0024_documentfile'), ('base', '0025_organization_type'), ('base', '0026_structure_type'), ('base', '0027_auto_20160406_1706'), ('base', '0028_auto_20160412_1219'), ('base', '0029_domain'), ('base', '0030_auto_20160413_1249'), ('base', '0031_applicationnotice'), ('base', '0032_auto_20160419_1612'), ('base', '0033_auto_20160421_1558'), ('base', '0034_auto_20160421_2039'), ('base', '0035_auto_20160421_2347'), ('base', '0036_auto_20160425_2040'), ('base', '0037_auto_20160427_1211'), ('base', '0038_auto_20160502_1559'), ('base', '0039_auto_20160502_0055'), ('base', '0040_scoresencoding'), ('base', '0041_messagehistory'), ('base', '0042_auto_20160506_1306'), ('base', '0043_auto_20160509_0748'), ('base', '0044_auto_20160511_2247'), ('base', '0045_update_justification_values'), ('base', '0046_scoresencoding'), ('base', '0047_auto_20160516_2107'), ('base', '0048_person_birth_date'), ('base', '0049_auto_20160523_1031'), ('base', '0050_sessionexam_deadline'), ('base', '0051_scoresencoding'), ('base', '0052_auto_20160527_1510'), ('base', '0053_auto_20160529_2355'), ('base', '0054_scoresencoding'), ('base', '0055_message_history_modifications'), ('base', '0056_create_permissions'), ('base', '0057_creation_and_initialisation_of_groups'), ('base', '0058_add_initial_users_to_groups'), ('base', '0059_auto_20160718_1435'), ('base', '0060_offeryeardomain'), ('base', '0061_auto_20160902_1639'), ('base', '0062_add_uuid_field'), ('base', '0063_populate_uuid_values'), ('base', '0064_remove_uuid_null'), ('base', '0065_migration_to_osis_common'), ('base', '0066_person_source'), ('base', '0067_externaloffer'), ('base', '0068_auto_20160921_2201'), ('base', '0069_auto_20160831_1551'), ('base', '0070_scoresencoding'), ('base', '0071_add_learning_unit_year'), ('base', '0072_attribution_learning_unit'), ('base', '0073_auto_20161028_0922'), ('base', '0074_update_ext_id_learning_unit'), ('base', '0075_offeryear_enrollment_enabled'), ('base', '0076_auto_20161104_1504'), ('base', '0077_scoresencoding'), ('base', '0078_offeryear_mail'), ('base', '0079_pgm_managers_and_score_sheet_address'), ('base', '0080_scoresencoding'), ('base', '0081_auto_20161207_1432'), ('base', '0082_auto_20161213_1654'), ('base', '0083_auto_20161215_1414'), ('base', '0084_auto_20161216_1338'), ('base', '0085_auto_20170105_1315'), ('base', '0086_populate_uuid_values'), ('base', '0087_uuid_not_null'), ('base', '0088_auto_20170106_1728'), ('base', '0089_populate_uuid_values'), ('base', '0090_uuid_not_null'), ('base', '0091_academiccalendar_uuid'), ('base', '0092_populate_academiccalendar_uuid'), ('base', '0093_academiccalendar_uuid'), ('base', '0094_academiccalendar_reference'), ('base', '0095_synchronization'), ('base', '0096_auto_20170120_1615'), ('base', '0097_learningunitcomponent_coefficient_repetition'), ('base', '0098_auto_20170306_0953'), ('base', '0099_auto_20170320_1114'), ('base', '0100_auto_20170331_1610'), ('base', '0101_auto_20170411_1331'), ('base', '0102_auto_20170418_1008'), ('base', '0103_auto_20170419_1030'), ('base', '0104_auto_20170421_1521'), ('base', '0105_auto_20170420_1433'), ('base', '0106_auto_20170428_1119'), ('base', '0107_learningunit_learning_container'), ('base', '0108_auto_20170428_1818'), ('base', '0109_sessionexam_offer_year'), ('base', '0110_learningunityear_structure'), ('base', '0111_offertype'), ('base', '0112_offeryear_offer_type'), ('base', '0113_entity_entityaddress_entitylink_entityversion'), ('base', '0114_auto_20170512_0859'), ('base', '0115_auto_20170508_1548'), ('base', '0116_auto_20170516_1000'), ('base', '0117_auto_20170516_0919'), ('base', '0118_auto_20170516_1153'), ('base', '0119_auto_20170516_1326'), ('base', '0120_students_groups'), ('base', '0121_auto_20170518_0959'), ('base', '0122_auto_20170524_1538'), ('base', '0123_auto_20170529_1451'), ('base', '0124_entity_models_update'), ('base', '0125_auto_20170529_1004'), ('base', '0126_auto_20170530_1401'), ('base', '0127_auto_20170530_1716'), ('base', '0128_auto_20170601_1345'), ('base', '0129_auto_20170601_1542'), ('base', '0130_learningcontaineryear_campus'), ('base', '0131_auto_20170602_1745'), ('base', '0132_learningclassyear_description'), ('base', '0133_auto_20170607_1451'), ('base', '0134_entity_models_update'), ('base', '0135_auto_20170616_0850'), ('base', '0136_auto_20170619_1107'), ('base', '0137_auto_20170620_1042'), ('base', '0138_auto_20170626_0938'), ('base', '0139_learningcontainer_start_year'), ('base', '0140_auto_20170627_1516'), ('base', '0141_auto_20170703_0957'), ('base', '0142_auto_20170718_1145'), ('base', '0143_educationgroup_educationgroupyear_groupelementyear'), ('base', '0144_auto_20170719_1417'), ('base', '0145_auto_20170801_1550'), ('base', '0146_remove_person_national_id'), ('base', '0147_auto_20170810_1330'), ('base', '0148_auto_20170821_0931'), ('base', '0149_auto_20170830_0958'), ('base', '0150_learningcomponentyear_hourly_volume_partial'), ('base', '0151_remove_learningunit_description'), ('base', '0152_auto_20170905_1317'), ('base', '0153_education_group_year_new_fields'), ('base', '0154_auto_20170906_1637'), ('base', '0155_auto_20170908_1551'), ('base', '0156_offeryearentity_education_group_year'), ('base', '0157_entitymanager_entity'), ('base', '0158_learning_unit_component_clean'), ('base', '0159_learning_component_year_not_null'), ('base', '0160_auto_20170926_0828'), ('base', '0161_new_fields_educationgroupyear'), ('base', '0162_educationgroup_permissions'), ('base', '0163_auto_20170919_1116'), ('base', '0164_educationgroupyear_category'), ('base', '0165_auto_20171009_1432'), ('base', '0166_educationgrouporganization'), ('base', '0167_offerenrollment_enrollment_state'), ('base', '0168_auto_20171018_1045'), ('base', '0169_student_academic_enrollment_state'), ('base', '0170_remove_student_academic_enrollment_state'), ('base', '0171_auto_20171017_1132'), ('base', '0172_learningunityear_quadrimester'), ('base', '0173_auto_20171027_1646'), ('base', '0174_auto_20171027_1647'), ('base', '0175_auto_20171027_1702'), ('base', '0176_auto_20171027_1708'), ('base', '0177_learningcomponentyear_volume_declared_vacant'), ('base', '0178_auto_20171031_1544'), ('base', '0179_learningcontainer_uuid'), ('base', '0180_populate_learning_container_uuid'), ('base', '0181_removed_nullable_uuid'), ('base', '0182_programmanager_education_group'), ('base', '0183_mandate_offer_calendar_date'), ('base', '0184_auto_20171106_1203'), ('base', '0185_programmanager_link_to_education_group'), ('base', '0186_message_templates_learning_unit_deletion'), ('base', '0187_auto_20171120_1551'), ('base', '0188_auto_20171121_0948'), ('base', '0189_groupelementyear'), ('base', '0190_auto_20171122_0929'), ('base', '0191_auto_20171122_0930'), ('base', '0192_auto_20171123_0827'), ('base', '0193_auto_20171124_0907'), ('base', '0194_auto_20171124_0926'), ('base', '0195_auto_20171124_1018'), ('base', '0196_auto_20171128_1442'), ('base', '0197_auto_20171130_0823'), ('base', '0198_auto_20171130_1602'), ('base', '0199_learningunitenrollment_enrollment_state'), ('base', '0200_examenrollment_deleted'), ('base', '0201_auto_20171204_1659'), ('base', '0202_auto_20171127_1302'), ('base', '0203_populate_uuid_entity'), ('base', '0204_remove_uuid_null'), ('base', '0205_auto_20171218_1408'), ('base', '0206_sessionexamdeadline_deliberation_date'), ('base', '0207_auto_20171220_1035'), ('base', '0208_create_role_executive'), ('base', '0209_auto_20180103_1536'), ('base', '0210_auto_20180105_1644'), ('base', '0211_auto_20180109_1436'), ('base', '0212_remove_offeryearcalendar_customized'), ('base', '0213_auto_20180111_1452'), ('base', '0214_auto_20180109_1529'), ('base', '0215_auto_20180115_1220'), ('base', '0216_auto_20180116_1026'), ('base', '0217_auto_20180116_1046'), ('base', '0218_auto_20180116_1052'), ('base', '0219_auto_20180116_1052'), ('base', '0220_remove_campus_code'), ('base', '0221_auto_20180123_1541'), ('base', '0222_auto_20180125_0923'), ('base', '0223_auto_20180129_1106'), ('base', '0224_auto_20180129_1308'), ('base', '0225_WARNING_INDEX_20180129_1413'), ('base', '0226_auto_20180202_1044'), ('base', '0227_auto_20180202_1545'), ('base', '0228_titles_fields_renaming'), ('base', '0229_auto_20180205_1048'), ('base', '0230_auto_20180205_1031'), ('base', '0231_auto_20180207_0918'), ('base', '0232_auto_20180220_1527'), ('base', '0233_auto_20180222_1502'), ('base', '0234_auto_20180222_1649'), ('base', '0235_auto_20180226_0857'), ('base', '0236_auto_20180312_1035'), ('base', '0237_learningunityear_summary_editable'), ('base', '0238_auto_20180307_1338'), ('base', '0239_message_template_proposal_cancel'), ('base', '0240_auto_20180316_1041'), ('base', '0241_remove_proposallearningunit_learning_unit_year'), ('base', '0242_proposallearningunit_learning_unit_year'), ('base', '0243_auto_20180316_1034'), ('base', '0244_auto_20180316_1908'), ('base', '0245_auto_20180321_1107'), ('base', '0246_auto_20180326_1031'), ('base', '0247_auto_20180328_0944'), ('base', '0248_auto_20180328_1347'), ('base', '0249_auto_20180327_1458'), ('base', '0250_auto_20180327_1513'), ('base', '0251_auto_20180330_1716'), ('base', '0252_auto_20180403_1028'), ('base', '0253_message_template_proposal_consolidate'), ('base', '0254_auto_20180416_0817'), ('base', '0255_auto_20180416_0929'), ('base', '0256_auto_20180416_1024'), ('base', '0257_remove_groupelementyear_absolute_credits'), ('base', '0258_auto_20180416_1300'), ('base', '0259_auto_20180416_1404'), ('base', '0260_auto_20180416_1839'), ('base', '0261_offerenrollment_education_group_year'), ('base', '0262_remove_educationgroupyear_credits'), ('base', '0263_fix_message_consolidation_cancellation_proposals'), ('base', '0264_auto_20180420_1014'), ('base', '0265_educationgroupyear_credits'), ('base', '0266_auto_20180425_1611'), ('base', '0267_auto_20180507_0828'), ('base', '0268_learningcomponentyear_cm_to_pm'), ('base', '0269_learningcomponentyear_tp_to_pp'), ('base', '0270_auto_20180514_1112'), ('base', '0271_auto_20180518_1316'), ('base', '0272_auto_20180524_0918'), ('base', '0273_auto_20180525_1153'), ('base', '0274_auto_20180528_1344'), ('base', '0275_auto_20180529_1456'), ('base', '0276_professional_integration'), ('base', '0277_auto_20180601_1458'), ('base', '0278_auto_20180601_1600'), ('base', '0279_auto_20180604_1600'), ('base', '0280_auto_20180606_0738'), ('base', '0281_auto_20180604_1441'), ('base', '0282_auto_20180606_1332'), ('base', '0283_learningunityear_existing_proposal_in_epc'), ('base', '0284_auto_20180608_1447'), ('base', '0285_auto_20180612_1157'), ('base', '0286_auto_20180615_1145'), ('base', '0287_auto_20180615_1340'), ('base', '0288_auto_20180618_1323'), ('base', '0289_auto_20180619_1435'), ('base', '0290_auto_20180619_0928'), ('base', '0291_auto_20180619_1616'), ('base', '0292_auto_20180621_0943'), ('base', '0293_auto_20180621_1446'), ('base', '0294_auto_20180625_1159'), ('base', '0295_auto_20180627_1417'), ('base', '0296_admissioncondition_admissionconditionline'), ('base', '0297_auto_20180629_1443'), ('base', '0298_unauthorizedrelationship'), ('base', '0299_remove_learningunityear_bibliography'), ('base', '0300_auto_20180703_0941'), ('base', '0301_auto_20180703_1611'), ('base', '0302_auto_20180704_1417'), ('base', '0303_auto_20180705_1040'), ('base', '0304_auto_20180705_1115'), ('base', '0305_auto_20180705_1407'), ('base', '0306_auto_20180709_1334'), ('base', '0307_auto_20180711_1117'), ('base', '0308_educationgrouptype_changed'), ('base', '0309_auto_20180717_1628'), ('base', '0310_auto_20180718_1539'), ('base', '0311_auto_20180719_1551'), ('base', '0312_educationgroupyear_languages'), ('base', '0313_remove_learningunityear_mobility_modality'), ('base', '0314_auto_20180723_1503'), ('base', '0315_auto_20180724_0823'), ('base', '0316_auto_20180725_1033'), ('base', '0317_auto_20180725_1229'), ('base', '0318_remove_educationgroupyear_fee_type'), ('base', '0319_auto_20180727_0837'), ('base', '0320_remove_groupelementyear_sessions_derogation'), ('base', '0321_round_credits'), ('base', '0322_auto_20180727_1046'), ('base', '0323_auto_20180730_0948'), ('base', '0324_auto_20180731_0936'), ('base', '0325_auto_20180802_0954'), ('base', '0326_auto_20180807_1229'), ('base', '0327_auto_20180808_1202'), ('base', '0328_auto_20180809_1502'), ('base', '0329_auto_20180810_1023'), ('base', '0330_auto_20180811_1335'), ('base', '0331_auto_20180811_1607'), ('base', '0332_auto_20180816_1540'), ('base', '0333_auto_20180820_1343'), ('base', '0334_auto_20180821_0935'), ('base', '0335_auto_20180822_0951'), ('base', '0336_auto_20180822_1018'), ('base', '0337_auto_20180821_1029'), ('base', '0338_auto_20180824_1014'), ('base', '0339_auto_20180828_1416'), ('base', '0340_auto_20180829_1413'), ('base', '0341_auto_20180830_1537'), ('base', '0342_auto_20180830_1605'), ('base', '0343_auto_20180903_1105'), ('base', '0344_auto_20180903_1613'), ('base', '0345_auto_20180907_0944'), ('base', '0346_auto_20180911_1623'), ('base', '0347_auto_20180912_1459'), ('base', '0348_educationgroupyear_internal_comment'), ('base', '0349_auto_20180913_1021'), ('base', '0350_auto_20180914_0938'), ('base', '0351_auto_20180914_1155'), ('base', '0352_auto_20180914_1204'), ('base', '0353_auto_20180919_1102'), ('base', '0354_auto_20180919_0843'), ('base', '0355_message_template_luys_automatic_postponement'), ('base', '0356_auto_20180920_1542'), ('base', '0357_auto_20180920_1650'), ('base', '0358_auto_20180921_1059'), ('base', '0359_message_template_luys_automatic_postponement_update'), ('base', '0360_auto_20180928_1042'), ('base', '0361_auto_20181003_1526'), ('base', '0362_auto_20181003_1534'), ('base', '0363_auto_20181004_1038'), ('base', '0364_auto_20181005_1215'), ('base', '0365_auto_20181009_1547'), ('base', '0366_auto_20181010_1627'), ('base', '0367_auto_20181017_1141'), ('base', '0368_auto_20181017_1142'), ('base', '0369_auto_20181017_1215'), ('base', '0370_message_template_egys_automatic_postponement'), ('base', '0371_message_template_egys_automatic_postponement_update'), ('base', '0372_auto_20181017_1601'), ('base', '0373_message_template_egys_automatic_postponement_update'), ('base', '0374_auto_20181018_0946'), ('base', '0375_auto_20181018_1206'), ('base', '0376_auto_20181022_1510'), ('base', '0377_auto_20181024_1436'), ('base', '0378_auto_20181026_1612'), ('base', '0379_auto_20181029_1125'), ('base', '0380_auto_20181030_1108'), ('base', '0381_auto_20181031_1332'), ('base', '0382_auto_20181026_1500'), ('base', '0383_organizationaddress_is_main'), ('base', '0384_auto_20181107_0952'), ('base', '0385_trigramextension'), ('base', '0386_auto_20181109_1055'), ('base', '0387_auto_20181112_1138'), ('base', '0388_auto_20181109_1503'), ('base', '0389_auto_20181114_1234'), ('base', '0390_auto_20181116_1431'), ('base', '0391_auto_20181116_1044'), ('base', '0392_auto_20181119_1406'), ('base', '0393_auto_20181119_1407'), ('base', '0394_auto_20181119_1407'), ('base', '0395_auto_20181120_0844'), ('base', '0396_auto_20181119_1217'), ('base', '0397_auto_20181120_0952'), ('base', '0398_remove_prerequisite_prerequisite'), ('base', '0399_learningunityear_learning_component_years'), ('base', '0400_auto_20181121_1529'), ('base', '0401_auto_20181128_1254'), ('base', '0402_date_enrollment'), ('base', '0403_perms_for_sic'), ('base', '0404_auto_20181129_1305'), ('base', '0405_auto_20181130_0958'), ('base', '0406_auto_20181203_1025'), ('base', '0407_auto_20181203_1108'), ('base', '0408_educationgrouppublicationcontact'), ('base', '0409_auto_20181206_1344'), ('base', '0410_auto_20181207_1523'), ('base', '0411_auto_20181210_1029'), ('base', '0412_auto_20181211_1100'), ('base', '0413_hops'), ('base', '0414_educationgroupyear_publication_contact_entity'), ('base', '0415_auto_20181212_0821'), ('base', '0416_educationgrouptype_learning_unit_child_allowed'), ('base', '0417_auto_20181214_0955'), ('base', '0418_remove_hops_uuid'), ('base', '0419_auto_20181217_1615'), ('base', '0420_authorizedrelationship_reference'), ('base', '0421_auto_20190107_1118'), ('base', '0422_auto_20190114_0725'), ('base', '0423_remove_authorizedrelationship_reference'), ('base', '0424_auto_20190116_0915'), ('base', '0425_auto_20190116_1441'), ('base', '0426_educationgroupyear_linked_with_epc'), ('base', '0427_auto_20190129_1508'), ('base', '0428_auto_20190201_1520'), ('base', '0429_auto_20190208_0743'), ('base', '0430_auto_20190211_1043'), ('base', '0431_auto_20190220_1537'), ('base', '0432_auto_20190222_1504'), ('base', '0433_auto_20190305_1329'), ('base', '0434_auto_20190305_1918'), ('base', '0435_educationgroupyear_isced_domain'), ('base', '0436_auto_20190313_1410'), ('base', '0437_auto_20190318_0942'), ('base', '0438_auto_20190318_1330'), ('base', '0439_person_managed_entities'), ('base', '0440_validationrule_placeholder'), ('base', '0441_auto_20190325_0907'), ('base', '0442_programmanager_is_main'), ('base', '0443_auto_20190411_1707'), ('base', '0444_auto_20190412_0948'), ('base', '0445_add_field_learning_unit_year'), ('base', '0446_populate_learning_unit_year'), ('base', '0447_auto_20190405_1518'), ('base', '0448_delete_components_without_learning_units'), ('base', '0449_auto_20190423_1843'), ('base', '0450_organization_is_current_partner'), ('base', '0451_auto_20190506_0918'), ('base', '0452_auto_20190510_1525'), ('base', '0453_auto_20190517_0831'), ('base', '0454_auto_20190517_0935'), ('base', '0455_populate_repartition_volumes'), ('base', '0456_auto_20190515_1555'), ('base', '0457_message_template_egys_automatic_postponement_update'), ('base', '0458_auto_20190613_1614'), ('base', '0459_auto_20190617_1021'), ('base', '0460_populate_container_entities'), ('base', '0461_auto_20190617_1042'), ('base', '0462_auto_20190626_1037'), ('base', '0463_auto_20190705_0841'), ('base', '0464_message_template_egys_automatic_postponement_update'), ('base', '0465_message_template_egys_automatic_postponement'), ('base', '0466_auto_20190730_1101'), ('base', '0467_create_permission_person_model'), ('base', '0468_auto_20190819_1317'), ('base', '0469_auto_20190806_1141'), ('base', '0470_auto_20190806_1142'), ('base', '0471_auto_20190806_1143'), ('base', '0472_auto_20190807_1538'), ('base', '0473_auto_20190910_1526'), ('base', '0474_academiccalendar_data_year'), ('base', '0475_populate_academiccalendar_data_year_field'), ('base', '0476_auto_20190829_0856'), ('base', '0477_auto_20190829_0858'), ('base', '0478_auto_20190829_0904'), ('base', '0479_auto_20190904_1351'), ('base', '0480_auto_20191025_1029'), ('base', '0481_auto_20191106_1539'), ('base', '0482_message_template_luys_automatic_postponement_update'), ('base', '0483_message_template_luys_after_postponement_update'), ('base', '0484_message_template_postponement'), ('base', '0485_create_events_lu_edition_fac_mgr'), ('base', '0486_message templates_postponements_order'), ('base', '0487_auto_20191206_1519'), ('base', '0488_auto_20191211_1452'), ('base', '0489_auto_20191217_1505'), ('base', '0490_remove_learningunit_existing_proposal_in_epc'), ('base', '0491_auto_20200107_1458'), ('base', '0492_populate_empty_english_title_in_education_group_year'), ('base', '0493_auto_20200114_1249'), ('base', '0494_auto_20200115_0952'), ('base', '0495_learningachievement_consistency_id'), ('base', '0496_auto_20200106_1543'), ('base', '0497_auto_20200108_1213')]

    initial = True

    dependencies = [
        ('reference', '0017_language_changed'),
        ('reference', '0002_auto_20160414_1720'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reference', '0002_auto_20190308_1450'),
        ('reference', '0020_domain_changed'),
        ('sites', '__latest__'),
        ('contenttypes', '__latest__'),
        ('reference', '0003_decree_domain'),
        ('reference', '0016_auto_20170410_1318'),
        ('reference', '0005_auto_20160902_1639'),
        ('reference', '0009_auto_20160921_1139'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('year', models.IntegerField(unique=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('end_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('start_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'permissions': (('can_access_academicyear', 'Can access academic year'),),
                'ordering': ['year'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('MAIN', 'Main'), ('ACADEMIC_PARTNER', 'Academic partner'), ('EMBASSY', 'Embassy'), ('RESEARCH_CENTER', 'Research center'), ('ENTERPRISE', 'Enterprise'), ('HOSPITAL', 'Hospital'), ('NGO', 'Non-governmental organization')], default='', max_length=30)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('acronym', models.CharField(blank=True, max_length=20)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='organization_logos')),
                ('name', models.CharField(default='', max_length=255)),
                ('prefix', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'permissions': (('can_access_organization', 'Can access organization'),),
                'ordering': (django.db.models.expressions.OrderBy(django.db.models.expressions.F('is_active'), descending=True), 'name'),
            },
        ),
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Organization')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('is_administration', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'campuses',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Organization')),
                ('external_id', models.CharField(db_index=True, max_length=255, null=True, unique=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Country')),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('fax', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.CreateModel(
            name='LearningContainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningContainerYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Common title')),
                ('acronym', models.CharField(max_length=10)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.AcademicYear')),
                ('learning_container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainer')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('container_type', models.CharField(choices=[('COURSE', 'Course'), ('INTERNSHIP', 'Internship'), ('DISSERTATION', 'Dissertation'), ('OTHER_COLLECTIVE', 'Other collective'), ('OTHER_INDIVIDUAL', 'Other individual'), ('MASTER_THESIS', 'Thesis'), ('EXTERNAL', 'External')], db_index=True, max_length=20, verbose_name='Type')),
                ('common_title_english', models.CharField(blank=True, max_length=250, null=True, verbose_name='Common English title')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('team', models.BooleanField(default=False, verbose_name='Team management')),
                ('is_vacant', models.BooleanField(default=False, verbose_name='Vacant')),
                ('type_declaration_vacant', models.CharField(blank=True, choices=[('RESEVED_FOR_INTERNS', 'Reserved for interns'), ('OPEN_FOR_EXTERNS', 'Open for externs'), ('EXCEPTIONAL_PROCEDURE', 'Exceptional procedure'), ('VACANT_NOT_PUBLISH', 'Vacant not publish'), ('DO_NOT_ASSIGN', 'Do not assign')], max_length=100, null=True, verbose_name='Decision')),
                ('additional_entity_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='additional_entities_1', to='base.Entity')),
                ('additional_entity_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='additional_entities_2', to='base.Entity')),
                ('allocation_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='allocation_entities', to='base.Entity')),
                ('requirement_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='requirement_entities', to='base.Entity')),
            ],
            options={
                'permissions': (('can_access_learningcontaineryear', 'Can access learning container year'),),
                'unique_together': {('learning_container', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='LearningUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('learning_container', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainer')),
                ('deleted', models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ('end_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='learning_unit_end_years', to='base.AcademicYear', verbose_name='Last year of organization')),
                ('start_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='learning_unit_start_years', to='base.AcademicYear', verbose_name='Start academic year')),
            ],
            options={
                'permissions': (('can_access_learningunit', 'Can access learning unit'), ('can_edit_learningunit_date', 'Can edit learning unit date'), ('can_edit_learningunit', 'Can edit learning unit'), ('can_edit_learningunit_pedagogy', 'Can edit learning unit pedagogy'), ('can_edit_learningunit_specification', 'Can edit learning unit specification'), ('can_delete_learningunit', 'Can delete learning unit'), ('can_propose_learningunit', 'Can propose learning unit '), ('can_create_learningunit', 'Can create learning unit'), ('can_consolidate_learningunit_proposal', 'Can consolidate learning unit proposal')),
                'verbose_name': 'Learning unit',
            },
        ),
        migrations.CreateModel(
            name='LearningUnitYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('acronym', models.CharField(db_index=True, max_length=15, validators=[django.core.validators.RegexValidator('^[BEGLMTWX][A-Z]{2,4}[1-9]\\d{3}')], verbose_name='Code')),
                ('specific_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='French title proper')),
                ('credits', models.DecimalField(decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(500)], verbose_name='Credits')),
                ('decimal_scores', models.BooleanField(default=False)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.AcademicYear', validators=[base.models.learning_unit_year.academic_year_validator], verbose_name='Academic year')),
                ('learning_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnit')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('session', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('12', '12'), ('13', '13'), ('23', '23'), ('123', '123'), ('P23', 'P23')], max_length=50, null=True, verbose_name='Session derogation')),
                ('specific_title_english', models.CharField(blank=True, max_length=250, null=True, verbose_name='English title proper')),
                ('subtype', models.CharField(choices=[('FULL', 'Full'), ('PARTIM', 'Partim')], default='FULL', max_length=50)),
                ('summary_locked', models.BooleanField(default=False, verbose_name='blocked update for tutor')),
                ('internship_subtype', models.CharField(blank=True, choices=[('TEACHING_INTERNSHIP', 'Teaching internship'), ('CLINICAL_INTERNSHIP', 'Clinical internship'), ('PROFESSIONAL_INTERNSHIP', 'Professional internship'), ('RESEARCH_INTERNSHIP', 'Research internship')], max_length=250, null=True, verbose_name='Internship subtype')),
                ('quadrimester', models.CharField(blank=True, choices=[('Q1', 'Q1'), ('Q2', 'Q2'), ('Q3', 'Q3'), ('Q1and2', 'Q1 and Q2'), ('Q1or2', 'Q1 or Q2')], max_length=9, null=True, verbose_name='Quadrimester')),
                ('status', models.BooleanField(default=False, verbose_name='Active')),
                ('attribution_procedure', models.CharField(blank=True, choices=[('INTERNAL_TEAM', 'Internal team'), ('EXTERNAL', 'External')], max_length=20, null=True, verbose_name='Procedure')),
                ('professional_integration', models.BooleanField(default=False, verbose_name='Professional integration')),
                ('learning_container_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainerYear')),
                ('language', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Language', verbose_name='Language')),
                ('campus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Campus', verbose_name='Learning location')),
                ('periodicity', models.CharField(choices=[('ANNUAL', 'Annual'), ('BIENNIAL_EVEN', 'Biennial even'), ('BIENNIAL_ODD', 'Biennial odd')], default='ANNUAL', max_length=20, verbose_name='Periodicity')),
                ('faculty_remark', models.TextField(blank=True, null=True, verbose_name='Faculty remark (unpublished)')),
                ('other_remark', models.TextField(blank=True, null=True, verbose_name='Other remark (intended for publication)')),
                ('other_remark_english', models.TextField(blank=True, null=True, verbose_name='Other remark in english (intended for publication)')),
            ],
            options={
                'permissions': (('can_receive_emails_about_automatic_postponement', 'Can receive emails about automatic postponement'),),
                'ordering': ('academic_year', 'acronym'),
                'verbose_name': 'Learning unit year',
                'unique_together': {('learning_unit', 'academic_year'), ('acronym', 'academic_year')},
            },
        ),
        migrations.AlterModelManagers(
            name='learningunityear',
            managers=[
                ('objects_with_container', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('global_id', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('U', 'unknown')], default='U', max_length=1, null=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('email', models.EmailField(default='', max_length=255)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('phone_mobile', models.CharField(blank=True, max_length=30, null=True)),
                ('language', models.CharField(choices=[('fr-be', 'French'), ('en', 'English')], default='fr-be', max_length=30, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('source', models.CharField(blank=True, choices=[('BASE', 'Base'), ('DISSERTATION', 'Dissertation'), ('INTERNSHIP', 'Internship'), ('CONTINUING_EDUCATION', 'Continuing Education')], default='BASE', max_length=25, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('employee', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('is_administrator', 'Is administrator'), ('is_institution_administrator', 'Is institution administrator '), ('can_edit_education_group_administrative_data', 'Can edit education group administrative data'), ('can_add_charge_repartition', 'Can add charge repartition'), ('can_change_attribution', 'Can change attribution'), ('can_read_persons_roles', 'Can read persons roles')),
            },
        ),
        migrations.AlterModelManagers(
            name='person',
            managers=[
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('registration_id', models.CharField(db_index=True, max_length=10, unique=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'permissions': (('can_access_student', 'Can access student'),),
                'ordering': ('person__last_name', 'person__first_name'),
            },
        ),
        migrations.CreateModel(
            name='OfferEnrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('date_enrollment', models.DateField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Student')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('enrollment_state', models.CharField(blank=True, choices=[('SUBSCRIBED', 'Subscribed'), ('PROVISORY', 'Provisory'), ('PENDING', 'Pending'), ('TERMINATION', 'Termination'), ('END_OF_CYCLE', 'End of cycle')], max_length=15, null=True)),
            ],
            options={
                'permissions': (('can_access_student_path', 'Can access student path'), ('can_access_evaluation', 'Can access evaluation')),
            },
        ),
        migrations.CreateModel(
            name='LearningUnitEnrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('date_enrollment', models.DateField()),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
                ('offer_enrollment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.OfferEnrollment')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('enrollment_state', models.CharField(choices=[('ENROLLED', 'Enrolled')], default='', max_length=20)),
            ],
            options={
                'unique_together': {('offer_enrollment', 'learning_unit_year', 'enrollment_state')},
            },
        ),

        migrations.CreateModel(
            name='AcademicCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('reference', models.CharField(choices=[('DELIBERATION', 'Deliberation'), ('DISSERTATION_SUBMISSION', 'Dissertation submission'), ('EXAM_ENROLLMENTS', 'Exam enrollments'), ('SCORES_EXAM_DIFFUSION', 'Scores diffusion'), ('SCORES_EXAM_SUBMISSION', 'Scores exam submission'), ('TEACHING_CHARGE_APPLICATION', 'Application for vacant courses'), ('ACCESS_SCHEDULE_CALENDAR', 'Access schedule calendar'), ('COURSE_ENROLLMENT', 'Course enrollment'), ('SUMMARY_COURSE_SUBMISSION', 'Summary course submission'), ('SUMMARY_COURSE_SUBMISSION_FORCE_MAJEURE', 'Summary course submission force majeure'), ('EDUCATION_GROUP_SWITCH', 'Education group switch'), ('EDUCATION_GROUP_EDITION', 'Education group edition'), ('EDUCATION_GROUP_EXTENDED_DAILY_MANAGEMENT', 'Education group extended daily management'), ('EDUCATION_GROUP_LIMITED_DAILY_MANAGEMENT', 'Education group limited daily management'), ('LEARNING_UNIT_EXTENDED_PROPOSAL_MANAGEMENT', 'Extended proposal management'), ('LEARNING_UNIT_LIMITED_PROPOSAL_MANAGEMENT', 'Limited proposal management')], db_index=True, max_length=70)),
                ('data_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.AcademicYear')),
            ],
            options={
                'permissions': (('can_access_academic_calendar', 'Can access academic calendar'),),
                'unique_together': {('data_year', 'title')},
            },
        ),
        migrations.CreateModel(
            name='EducationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('end_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='end_years', to='base.AcademicYear', verbose_name='Last year of organization')),
                ('start_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='start_years', to='base.AcademicYear', verbose_name='Start academic year')),
            ],
            options={
                'abstract': False,
                'permissions': (('add_training', 'Can add training'), ('add_minitraining', 'Can add mini-training'), ('add_group', 'Can add group'), ('change_commonpedagogyinformation', 'Can change common pedagogy information'), ('change_pedagogyinformation', 'Can change pedagogy information'), ('change_educationgroupcontent', 'Can change education group content')),
                'verbose_name': 'Education group',
            },
        ),
        migrations.CreateModel(
            name='EducationGroupType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('category', models.CharField(choices=[('TRAINING', 'Training'), ('MINI_TRAINING', 'Mini-Training'), ('GROUP', 'Group')], default='TRAINING', max_length=25, verbose_name='Category')),
                ('name', models.CharField(choices=[('AGGREGATION', 'Aggregation'), ('CERTIFICATE_OF_PARTICIPATION', 'Certificate of participation'), ('CERTIFICATE_OF_SUCCESS', 'Certificate of success'), ('CERTIFICATE_OF_HOLDING_CREDITS', 'Certificate of holding credits'), ('BACHELOR', 'Bachelor'), ('CERTIFICATE', 'Certificate'), ('CAPAES', 'CAPAES'), ('RESEARCH_CERTIFICATE', 'Research certificate'), ('UNIVERSITY_FIRST_CYCLE_CERTIFICATE', 'University first cycle certificate'), ('UNIVERSITY_SECOND_CYCLE_CERTIFICATE', 'University second cycle certificate'), ('ACCESS_CONTEST', 'Access contest'), ('LANGUAGE_CLASS', 'Language classes'), ('ISOLATED_CLASS', 'Isolated classes'), ('PHD', 'Ph.D'), ('FORMATION_PHD', 'Formation PhD'), ('JUNIOR_YEAR', 'Junior year'), ('PGRM_MASTER_120', 'Program master 120'), ('MASTER_MA_120', 'Master MA 120'), ('MASTER_MD_120', 'Master MD 120'), ('MASTER_MS_120', 'Master MS 120'), ('PGRM_MASTER_180_240', 'Program master 180-240'), ('MASTER_MA_180_240', 'Master MA 180-240'), ('MASTER_MD_180_240', 'Master MD 180-240'), ('MASTER_MS_180_240', 'Master MS 180-240'), ('MASTER_M1', 'Master in 60 credits'), ('MASTER_MC', 'Master of specialist'), ('INTERNSHIP', 'Internship'), ('DEEPENING', 'Deepening'), ('SOCIETY_MINOR', 'Society minor'), ('ACCESS_MINOR', 'Access minor'), ('OPEN_MINOR', 'Open minor'), ('DISCIPLINARY_COMPLEMENT_MINOR', 'Disciplinary complement minor'), ('FSA_SPECIALITY', 'FSA speciality'), ('OPTION', 'Option'), ('MOBILITY_PARTNERSHIP', 'Mobility partnership'), ('COMMON_CORE', 'Common core'), ('MINOR_LIST_CHOICE', 'Minor list choice'), ('MAJOR_LIST_CHOICE', 'Major list choice'), ('OPTION_LIST_CHOICE', 'Option list choice'), ('FINALITY_120_LIST_CHOICE', 'Finality 120 list choice'), ('FINALITY_180_LIST_CHOICE', 'Finality 180 list choice'), ('MOBILITY_PARTNERSHIP_LIST_CHOICE', 'Mobility partnership list choice'), ('COMPLEMENTARY_MODULE', 'Complementary module'), ('SUB_GROUP', 'Sub group')], max_length=255, unique=True, verbose_name='Type of training')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('learning_unit_child_allowed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EducationGroupYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('acronym', models.CharField(db_index=True, max_length=40, verbose_name='Acronym/Short title')),
                ('title', models.CharField(max_length=240, verbose_name='Title in French')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.AcademicYear', verbose_name='validity')),
                ('education_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroup')),
                ('academic_type', models.CharField(blank=True, choices=[('NON_ACADEMIC', 'Non academic'), ('NON_ACADEMIC_CREF', 'Non academic CREF'), ('ACADEMIC', 'Academic')], max_length=20, null=True, verbose_name='Academic type')),
                ('active', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('RE_REGISTRATION', 'Reregistration')], default='ACTIVE', max_length=20, verbose_name='Status')),
                ('admission_exam', models.BooleanField(default=False, verbose_name='Admission exam')),
                ('diploma_printing_orientation', models.CharField(blank=True, choices=[('NO_PRINT', 'No print'), ('IN_HEADING_2_OF_DIPLOMA', 'In heading 2 of diploma'), ('IN_EXPECTED_FORM', 'In expected form')], max_length=30, null=True)),
                ('diploma_printing_title', models.CharField(blank=True, default='', max_length=240, verbose_name='Diploma title')),
                ('dissertation', models.BooleanField(default=False, verbose_name='dissertation')),
                ('english_activities', models.CharField(blank=True, choices=[('YES', 'yes'), ('NO', 'no'), ('OPTIONAL', 'optional')], max_length=20, null=True, verbose_name='activities in English')),
                ('enrollment_campus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='enrollment', to='base.Campus', verbose_name='Enrollment campus')),
                ('funding', models.BooleanField(default=False, verbose_name='Funding')),
                ('funding_cud', models.BooleanField(default=False, verbose_name='Funding international cooperation CCD/CUD')),
                ('funding_direction', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], default='', max_length=1, verbose_name='Funding direction')),
                ('funding_direction_cud', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], default='', max_length=1, verbose_name='Funding international cooperation CCD/CUD direction')),
                ('inter_organization_information', models.CharField(blank=True, default='', max_length=320)),
                ('internship', models.CharField(choices=[('YES', 'yes'), ('NO', 'no'), ('OPTIONAL', 'optional')], default='NO', max_length=20, null=True, verbose_name='Internship')),
                ('joint_diploma', models.BooleanField(default=False, verbose_name='Leads to diploma/certificate')),
                ('other_campus_activities', models.CharField(blank=True, choices=[('YES', 'yes'), ('NO', 'no'), ('OPTIONAL', 'optional')], max_length=20, null=True, verbose_name='Activities on other campus')),
                ('other_language_activities', models.CharField(blank=True, choices=[('YES', 'yes'), ('NO', 'no'), ('OPTIONAL', 'optional')], max_length=20, null=True, verbose_name='Other languages activities')),
                ('partial_deliberation', models.BooleanField(default=False, verbose_name='Partial deliberation')),
                ('professional_title', models.CharField(blank=True, default='', max_length=320, verbose_name='Professionnal title')),
                ('schedule_type', models.CharField(choices=[('DAILY', 'Daily'), ('SHIFTED', 'Shifted'), ('ADAPTED', 'Adapted')], default='DAILY', max_length=20, verbose_name='Schedule type')),
                ('university_certificate', models.BooleanField(default=False, verbose_name='University certificate')),
                ('inter_university_abroad', models.BooleanField(default=False)),
                ('inter_university_belgium', models.BooleanField(default=False)),
                ('inter_university_french_community', models.BooleanField(default=False)),
                ('primary_language', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Language', verbose_name='Primary language')),
                ('duration', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Duration')),
                ('duration_unit', models.CharField(blank=True, choices=[('QUADRIMESTER', 'Quadrimester'), ('TRIMESTER', 'Trimester'), ('MONTH', 'Month'), ('WEEK', 'Week'), ('DAY', 'Day')], default='QUADRIMESTER', max_length=40, null=True, verbose_name='duration unit')),
                ('keywords', models.CharField(blank=True, default='', max_length=320, verbose_name='Keywords')),
                ('title_english', models.CharField(blank=True, default='', max_length=240, verbose_name='Title in English')),
                ('enrollment_enabled', models.BooleanField(default=True, verbose_name='Enrollment enabled')),
                ('language_association', models.CharField(blank=True, choices=[('OR', 'OR'), ('AND', 'AND')], max_length=5, null=True)),
                ('partial_acronym', models.CharField(db_index=True, max_length=15, null=True, verbose_name='code')),
                ('education_group_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupType', verbose_name='Type of training')),
                ('credits', models.PositiveIntegerField(blank=True, null=True, verbose_name='credits')),
                ('administration_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='administration_entity', to='base.Entity', verbose_name='Administration entity')),
                ('management_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='management_entity', to='base.Entity', verbose_name='Management entity')),
                ('default_learning_unit_enrollment', models.BooleanField(default=False, verbose_name='Default learning unit enrollment')),
                ('weighting', models.BooleanField(default=True, verbose_name='Weighting')),
                ('decree_category', models.CharField(blank=True, choices=[('FCONT', 'FCONT - Formation continue (non académique)'), ('BAC', 'BAC - Bachelier'), ('MA1', 'MA1 - Master en 60 crédits'), ('MA2X', 'MA2X - Master en 120 crédits'), ('MA2D', 'MA2D - Master en 120 crédits à finalité didactique'), ('MA2S', 'MA2S - Master en 120 crédits à finalité spécialisée'), ('MA2A', 'MA2A - Master en 120 crédits à finalité approfondie'), ('MA2M', 'MA2M - Master en 180 ou 240 crédits'), ('MACO', 'MACO - Master complémentaire'), ('AESSB', "AESSB - Agrégation de l'enseignement secondaire supérieur (AESS)"), ('CAPS', "CAPS - Certificat d'aptitude pédagogique approprié à l'enseignement supérieur (CAPAES)"), ('FODO', 'FODO - Formations doctorales (Certificat de formation à la recherche)'), ('DOCB', 'DOCB - Docteur'), ('CEMC', 'CEMC - Certificats de médecine clinique / Certificats interuniversitaires de formation médicale spécialisée')], max_length=40, null=True, verbose_name='Decree category')),
                ('rate_code', models.CharField(blank=True, choices=[('NO_ADDITIONAL_FEES', 'No additional fees'), ('AESS_CAPAES', 'AESS CAPAES'), ('MINERVAL_COMPLETE', 'Minerval complete'), ('UNIVERSITY_CERTIFICATE', 'University certificate'), ('ADVANCED_MASTER_IN_MEDICAL_SPECIALIZATION', 'Advanced master in medical specialization'), ('ACCESS_CONTEST', 'Access contest'), ('UNIVERSITY_CERTIFICATE_30_CREDITS', 'University certificate 30 credits'), ('CERTIFICATE_MEDECINE_COMPETENCE', 'Certificate medicine competence')], max_length=50, null=True, verbose_name='Rate code')),
                ('main_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Domain', verbose_name='main domain')),
                ('internal_comment', models.TextField(blank=True, max_length=500, verbose_name='comment (internal)')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('co_graduation', models.CharField(blank=True, db_index=True, max_length=8, null=True, verbose_name='Code co-graduation inter CfB')),
                ('co_graduation_coefficient', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)], verbose_name='Co-graduation total coefficient')),
                ('web_re_registration', models.BooleanField(default=True, verbose_name='Web re-registration')),
                ('publication_contact_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Entity', verbose_name='Publication contact entity')),
                ('linked_with_epc', models.BooleanField(default=False, verbose_name='Linked with EPC')),
                ('isced_domain', models.ForeignKey(blank=True, limit_choices_to={'is_ares': True}, null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.DomainIsced', verbose_name='ISCED domain')),
                ('partial_title', models.CharField(blank=True, default='', max_length=240, null=True, verbose_name='Partial title in French')),
                ('partial_title_english', models.CharField(blank=True, default='', max_length=240, null=True, verbose_name='Partial title in English')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Education group year',
                'ordering': ('academic_year',),
                'unique_together': {('education_group', 'academic_year'), ('acronym', 'academic_year'), ('partial_acronym', 'academic_year')},
                'index_together': {('acronym', 'academic_year'), ('partial_acronym', 'academic_year')},
            },
        ),
        migrations.AddField(
            model_name='offerenrollment',
            name='education_group_year',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.EducationGroupYear'),
        ),
        migrations.CreateModel(
            name='SessionExam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('number_session', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)])),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
            ],
        ),
        migrations.CreateModel(
            name='ExamEnrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('score_draft', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='Les notes doivent être comprises entre 0 et 20'), django.core.validators.MaxValueValidator(20, message='Les notes doivent être comprises entre 0 et 20')])),
                ('score_reencoded', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='Les notes doivent être comprises entre 0 et 20'), django.core.validators.MaxValueValidator(20, message='Les notes doivent être comprises entre 0 et 20')])),
                ('score_final', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='Les notes doivent être comprises entre 0 et 20'), django.core.validators.MaxValueValidator(20, message='Les notes doivent être comprises entre 0 et 20')])),
                ('justification_draft', models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence unjustified'), ('ABSENCE_JUSTIFIED', 'Absence justified'), ('CHEATING', 'Cheating')], max_length=20, null=True)),
                ('justification_reencoded', models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence unjustified'), ('ABSENCE_JUSTIFIED', 'Absence justified'), ('CHEATING', 'Cheating')], max_length=20, null=True)),
                ('justification_final', models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence unjustified'), ('ABSENCE_JUSTIFIED', 'Absence justified'), ('CHEATING', 'Cheating')], max_length=20, null=True)),
                ('learning_unit_enrollment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.LearningUnitEnrollment')),
                ('session_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.SessionExam')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('enrollment_state', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('NOT_ENROLLED', 'Not enrolled')], db_index=True, default='ENROLLED', max_length=20)),
                ('date_enrollment', models.DateField(blank=True, null=True, verbose_name="Date d'inscription")),
            ],
        ),
        migrations.CreateModel(
            name='EntityManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.Person')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.entity')),
                ('with_child', models.BooleanField(default=True)),
            ],
            options={
                'permissions': (('is_entity_manager', 'Is entity manager '),),
                'verbose_name': 'Entity manager',
                'verbose_name_plural': 'Entity managers',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='managed_entities',
            field=models.ManyToManyField(through='base.EntityManager', to='base.Entity'),
        ),
        migrations.CreateModel(
            name='EducationGroupLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PRIMARY_LANGUAGE', 'PRIMARY_LANGUAGE')], max_length=255)),
                ('order', models.IntegerField()),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reference.Language')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='educationgroupyear',
            name='languages',
            field=models.ManyToManyField(related_name='education_group_years', through='base.EducationGroupLanguage', to='reference.Language'),
        ),
        migrations.CreateModel(
            name='Mandate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('function', models.CharField(choices=[('PRESIDENT', 'President'), ('SECRETARY', 'Secretary'), ('SIGNATORY', 'Signatory')], max_length=20)),
                ('qualification', models.CharField(blank=True, max_length=50, null=True)),
                ('education_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroup')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_alert_message', models.TextField(default='')),
                ('text_free', models.TextField(default='')),
                ('text_university_bachelors', models.TextField(default='')),
                ('text_non_university_bachelors', models.TextField(default='')),
                ('text_holders_second_university_degree', models.TextField(default='')),
                ('text_holders_non_university_second_degree', models.TextField(default='')),
                ('text_adults_taking_up_university_training', models.TextField(default='')),
                ('text_personalized_access', models.TextField(default='')),
                ('text_admission_enrollment_procedures', models.TextField(default='')),
                ('text_alert_message_en', models.TextField(default='')),
                ('text_free_en', models.TextField(default='')),
                ('text_university_bachelors_en', models.TextField(default='')),
                ('text_non_university_bachelors_en', models.TextField(default='')),
                ('text_holders_second_university_degree_en', models.TextField(default='')),
                ('text_holders_non_university_second_degree_en', models.TextField(default='')),
                ('text_adults_taking_up_university_training_en', models.TextField(default='')),
                ('text_personalized_access_en', models.TextField(default='')),
                ('text_admission_enrollment_procedures_en', models.TextField(default='')),
                ('education_group_year', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
                ('text_ca_allegement', models.TextField(default='')),
                ('text_ca_allegement_en', models.TextField(default='')),
                ('text_ca_bacs_cond_generales', models.TextField(default='')),
                ('text_ca_bacs_cond_generales_en', models.TextField(default='')),
                ('text_ca_bacs_cond_particulieres', models.TextField(default='')),
                ('text_ca_bacs_cond_particulieres_en', models.TextField(default='')),
                ('text_ca_bacs_cond_speciales', models.TextField(default='')),
                ('text_ca_bacs_cond_speciales_en', models.TextField(default='')),
                ('text_ca_bacs_examen_langue', models.TextField(default='')),
                ('text_ca_bacs_examen_langue_en', models.TextField(default='')),
                ('text_ca_cond_generales', models.TextField(default='')),
                ('text_ca_cond_generales_en', models.TextField(default='')),
                ('text_ca_maitrise_fr', models.TextField(default='')),
                ('text_ca_maitrise_fr_en', models.TextField(default='')),
                ('text_ca_ouv_adultes', models.TextField(default='')),
                ('text_ca_ouv_adultes_en', models.TextField(default='')),
            ],
            options={
                'permissions': (('change_commonadmissioncondition', 'Can change common admission condition'),),
            },
        ),
        migrations.CreateModel(
            name='EducationGroupYearDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference.Domain')),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
            ],
        ),
        migrations.AddField(
            model_name='educationgroupyear',
            name='domains',
            field=models.ManyToManyField(related_name='education_group_years', through='base.EducationGroupYearDomain', to='reference.Domain'),
        ),
        migrations.AddField(
            model_name='educationgroupyear',
            name='secondary_domains',
            field=models.ManyToManyField(related_name='education_group_years', through='base.EducationGroupYearDomain', to='reference.Domain', verbose_name='secondary domains'),
        ),
        migrations.CreateModel(
            name='Prerequisite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_group_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('main_operator', models.CharField(choices=[('OR', 'Or'), ('AND', 'And')], default='AND', max_length=5)),
            ],
            options={
                'unique_together': {('learning_unit_year', 'education_group_year')},
            },
        ),
        migrations.CreateModel(
            name='CertificateAim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='aim number')),
                ('section', models.PositiveIntegerField(db_index=True, verbose_name='section')),
                ('description', models.CharField(db_index=True, max_length=1024, unique=True, verbose_name='Description')),
            ],
            options={
                'ordering': ('section', 'code'),
            },
        ),
        migrations.CreateModel(
            name='EducationGroupCertificateAim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('certificate_aim', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.CertificateAim')),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
            ],
            options={
                'unique_together': {('education_group_year', 'certificate_aim')},
            },
        ),
        migrations.AddField(
            model_name='educationgroupyear',
            name='certificate_aims',
            field=models.ManyToManyField(blank=True, related_name='education_group_years', through='base.EducationGroupCertificateAim', to='base.CertificateAim'),
        ),
        migrations.CreateModel(
            name='EducationGroupAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('code_name', models.CharField(max_length=100, verbose_name='code')),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear', verbose_name='Education group year')),
                ('english_text', ckeditor.fields.RichTextField(null=True, verbose_name='text in English')),
                ('french_text', ckeditor.fields.RichTextField(null=True, verbose_name='text in French')),
            ],
            options={
                'verbose_name': 'Education group achievement',
                'ordering': ('order',),
                'unique_together': set(),
            },
        ),
        migrations.CreateModel(
            name='LearningComponentYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(blank=True, max_length=4, null=True)),
                ('type', models.CharField(blank=True, choices=[('LECTURING', 'Lecturing'), ('PRACTICAL_EXERCISES', 'Practical exercises')], max_length=30, null=True)),
                ('comment', models.CharField(blank=True, max_length=255, null=True)),
                ('planned_classes', models.IntegerField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('hourly_volume_partial_q1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='hourly volume partial q1')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('volume_declared_vacant', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='volume declared vacant')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('hourly_volume_partial_q2', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='hourly volume partial q2')),
                ('hourly_volume_total_annual', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='hourly volume total annual')),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
                ('repartition_volume_additional_entity_1', base.models.learning_component_year.RepartitionVolumeField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('repartition_volume_additional_entity_2', base.models.learning_component_year.RepartitionVolumeField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('repartition_volume_requirement_entity', base.models.learning_component_year.RepartitionVolumeField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'permissions': (('can_access_learningunitcomponentyear', 'Can access learning unit component year'),),
            },
        ),
        migrations.CreateModel(
            name='GroupElementYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('is_mandatory', models.BooleanField(default=True, verbose_name='Mandatory')),
                ('relative_credits', models.IntegerField(blank=True, null=True, verbose_name='relative credits')),
                ('block', models.IntegerField(blank=True, null=True, verbose_name='Block')),
                ('comment', ckeditor.fields.RichTextField(blank=True, max_length=500, null=True, verbose_name='comment')),
                ('comment_english', ckeditor.fields.RichTextField(blank=True, max_length=500, null=True, verbose_name='english comment')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, editable=False)),
                ('link_type', models.CharField(blank=True, choices=[('REFERENCE', 'Reference')], max_length=25, null=True, verbose_name='Link type')),
                ('access_condition', models.BooleanField(default=False, verbose_name='Access condition')),
            ],
            options={
                'abstract': False,
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='ValidationRule',
            fields=[
                ('field_reference', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='field reference')),
                ('initial_value', models.CharField(blank=True, max_length=255, verbose_name='initial value')),
                ('regex_rule', models.CharField(blank=True, max_length=255, verbose_name='regex rule')),
                ('regex_error_message', models.CharField(blank=True, max_length=255, verbose_name='regex error message')),
                ('status_field', models.CharField(choices=[('REQUIRED', 'Required'), ('FIXED', 'Fixed'), ('ALERT', 'Alert'), ('NOT_REQUIRED', 'Not required'), ('DISABLED', 'Disabled')], default='NOT_REQUIRED', max_length=20)),
                ('help_text_en', ckeditor.fields.RichTextField(blank=True, verbose_name='english help text')),
                ('help_text_fr', ckeditor.fields.RichTextField(blank=True, verbose_name='french help text')),
                ('placeholder', models.CharField(blank=True, max_length=35, verbose_name='Placeholder')),
            ],
            options={
                'verbose_name': 'validation rule',
            },
        ),
        migrations.CreateModel(
            name='Synchronization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='SessionExamCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('number_session', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)])),
                ('academic_calendar', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicCalendar')),
            ],
            options={
                'unique_together': set(),
            },
        ),
        migrations.CreateModel(
            name='ExamEnrollmentHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_final', models.DecimalField(decimal_places=2, max_digits=4, null=True)),
                ('justification_final', models.CharField(choices=[('ABSENCE_UNJUSTIFIED', 'Absence unjustified'), ('ABSENCE_JUSTIFIED', 'Absence justified'), ('CHEATING', 'Cheating')], max_length=20, null=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('exam_enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.ExamEnrollment')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
            ],
        ),
        migrations.CreateModel(
            name='SessionExamDeadline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('deadline', models.DateField()),
                ('deadline_tutor', models.IntegerField(blank=True, null=True)),
                ('number_session', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)])),
                ('offer_enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.OfferEnrollment')),
                ('deliberation_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PersonAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(choices=[('RESIDENTIAL', 'Residential'), ('PROFESSIONAL', 'Professional')], default='Professional', max_length=20)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='reference.Country')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Person')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EntityVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('acronym', models.CharField(db_index=True, max_length=20)),
                ('entity_type', models.CharField(blank=True, choices=[('SECTOR', 'Sector'), ('FACULTY', 'Faculty'), ('SCHOOL', 'School'), ('INSTITUTE', 'Institute'), ('POLE', 'Pole'), ('DOCTORAL_COMMISSION', 'Doctoral commission'), ('PLATFORM', 'Platform'), ('LOGISTICS_ENTITY', 'Logistics entity')], db_index=True, default='', max_length=50, verbose_name='Type')),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(blank=True, db_index=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Entity')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_of', to='base.Entity')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='organization_logos', verbose_name='logo')),
            ],
        ),
        migrations.AlterModelManagers(
            name='entityversion',
            managers=[
                ('objects', base.models.entity_version.EntityVersionManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExternalLearningUnitYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_acronym', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='External code')),
                ('external_credits', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(500)], verbose_name='Local credits')),
                ('url', models.URLField(blank=True, max_length=255, null=True, verbose_name='URL of the learning unit')),
                ('requesting_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Entity', verbose_name='Requesting entity')),
                ('learning_unit_year', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear', verbose_name='learning unit year')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
                ('co_graduation', models.BooleanField(default=False, verbose_name='Co-graduation')),
                ('creation_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('mobility', models.BooleanField(default=False, verbose_name='Mobility')),
            ],
            options={
                'permissions': (('can_access_externallearningunityear', 'Can access external learning unit year'),),
                'unique_together': {('learning_unit_year', 'external_acronym')},
            },
        ),
        migrations.CreateModel(
            name='Mandatary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('mandate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Mandate')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
            ],
        ),
        migrations.CreateModel(
            name='ProgramManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person', verbose_name='person')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('education_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroup')),
                ('is_main', models.BooleanField(default=False, verbose_name='Main')),
            ],
            options={
                'verbose_name': 'Program manager',
                'verbose_name_plural': 'Program managers',
                'unique_together': {('person', 'education_group')},
            },
        ),
        migrations.CreateModel(
            name='EducationGroupOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_students', models.BooleanField(default=False, verbose_name='For all students')),
                ('enrollment_place', models.BooleanField(default=False, verbose_name='Reference institution')),
                ('diploma', models.CharField(choices=[('UNIQUE', 'Unique'), ('SEPARATE', 'Separate'), ('NOT_CONCERNED', 'Not concerned')], default='NOT_CONCERNED', max_length=40, verbose_name='UCL Diploma')),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('is_producing_annexe', models.BooleanField(default=False, verbose_name='Producing annexe')),
                ('is_producing_cerfificate', models.BooleanField(default=False, verbose_name='Producing certificat')),
            ],
            options={
                'unique_together': {('education_group_year', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='EntityCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('academic_calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicCalendar')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Entity')),
            ],
            options={
                'unique_together': {('academic_calendar', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='TeachingMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('mandatory', models.BooleanField(verbose_name='Is this teaching material mandatory?')),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, editable=False)),
            ],
            options={
                'verbose_name_plural': 'bibliographies',
                'ordering': ('learning_unit_year', 'order'),
            },
        ),
        migrations.CreateModel(
            name='AdmissionConditionLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(choices=[('ucl_bachelors', 'UCL Bachelors'), ('others_bachelors_french', 'Others Bachelors of the French speaking Community of Belgium'), ('bachelors_dutch', 'Bachelors of the Dutch speaking Community of Belgium'), ('foreign_bachelors', 'Foreign Bachelors'), ('graduates', 'Graduates'), ('masters', 'Masters')], max_length=32)),
                ('external_id', models.CharField(db_index=True, max_length=32, null=True)),
                ('diploma', models.TextField(default='')),
                ('conditions', models.TextField(default='')),
                ('access', models.CharField(choices=[('-', '-'), ('on_the_file', 'On the file: direct access or access with additional training'), ('direct_access', 'Direct Access'), ('access_with_training', 'Access with additional training')], default='-', max_length=32)),
                ('remarks', models.TextField(default='')),
                ('diploma_en', models.TextField(default='')),
                ('conditions_en', models.TextField(default='')),
                ('remarks_en', models.TextField(default='')),
                ('admission_condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AdmissionCondition')),
                ('order', models.PositiveIntegerField(db_index=True, default=False, editable=False)),
            ],
            options={
                'ordering': ('admission_condition', 'section', 'order'),
            },
        ),
        migrations.CreateModel(
            name='AuthorizedRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True)),
                ('child_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorized_child_type', to='base.EducationGroupType')),
                ('parent_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorized_parent_type', to='base.EducationGroupType')),
                ('max_count_authorized', models.PositiveIntegerField(blank=True, help_text='A null value means many relationships.', null=True, verbose_name='Maximum number of permitted relationships')),
                ('min_count_authorized', models.PositiveIntegerField(default=0, verbose_name='Minimum number of permitted relationships')),
            ],
        ),
        migrations.CreateModel(
            name='PrerequisiteItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('group_number', models.PositiveIntegerField()),
                ('position', models.PositiveIntegerField()),
                ('learning_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnit')),
                ('prerequisite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Prerequisite')),
            ],
            options={
                'unique_together': {('prerequisite', 'group_number', 'position')},
            },
        ),
        migrations.CreateModel(
            name='OfferYearCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('academic_calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicCalendar')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
            ],
            options={
                'unique_together': {('academic_calendar', 'education_group_year')},
            },
        ),
        migrations.CreateModel(
            name='EducationGroupDetailedAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('code_name', models.CharField(max_length=100, verbose_name='code')),
                ('education_group_achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupAchievement', verbose_name='Education group achievement')),
                ('english_text', ckeditor.fields.RichTextField(null=True, verbose_name='text in English')),
                ('french_text', ckeditor.fields.RichTextField(null=True, verbose_name='text in French')),
            ],
            options={
                'verbose_name': 'Education group detailed achievement',
                'ordering': ('order',),
                'unique_together': set(),
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProposalLearningUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('date', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('CREATION', 'Creation'), ('MODIFICATION', 'Modification'), ('TRANSFORMATION', 'Transformation'), ('TRANSFORMATION_AND_MODIFICATION', 'Transformation and modification'), ('SUPPRESSION', 'Suppression')], default='MODIFICATION', max_length=50, verbose_name='Type')),
                ('state', models.CharField(choices=[('FACULTY', 'Faculty'), ('CENTRAL', 'Central'), ('SUSPENDED', 'Suspended'), ('ACCEPTED', 'Accepted'), ('REFUSED', 'Refused')], default='FACULTY', max_length=50, verbose_name='State')),
                ('initial_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
                ('entity', models.ForeignKey(default=2, on_delete=django.db.models.deletion.CASCADE, to='base.Entity')),
                ('folder_id', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(9999999)])),
                ('learning_unit_year', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear')),
            ],
            options={
                'permissions': (('can_edit_learning_unit_proposal', 'Can edit learning unit proposal'),),
            },
        ),
        migrations.CreateModel(
            name='EducationGroupPublicationContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('type', models.CharField(choices=[('ACADEMIC_RESPONSIBLE', 'Academic responsible'), ('OTHER_ACADEMIC_RESPONSIBLE', 'Other academic responsible'), ('JURY_MEMBER', 'Jury member'), ('OTHER_CONTACT', 'Other contact')], default='OTHER_CONTACT', max_length=100, verbose_name='type')),
                ('education_group_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
                ('description', models.CharField(blank=True, default='', max_length=255, verbose_name='Description')),
                ('role_en', models.CharField(blank=True, default='', max_length=255, verbose_name='role (english)')),
                ('role_fr', models.CharField(blank=True, default='', max_length=255, verbose_name='role (french)')),
            ],
            options={
                'ordering': ('education_group_year', 'type', 'order'),
            },
        ),
        migrations.CreateModel(
            name='LearningClassYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=3, validators=[django.core.validators.RegexValidator('^[a-zA-Z]*$', 'Only letters are allowed.')])),
                ('learning_component_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningComponentYear')),
                ('description', models.CharField(blank=True, default='', max_length=100)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
            ],
            options={
                'permissions': (('can_access_learningclassyear', 'Can access learning class year'),),
            },
        ),
        migrations.CreateModel(
            name='Hops',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('ares_study', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)], verbose_name='ARES study code')),
                ('ares_graca', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)], verbose_name='ARES-GRACA')),
                ('ares_ability', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)], verbose_name='ARES ability')),
                ('education_group_year', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.EducationGroupYear')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LearningAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('code_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='code')),
                ('text', ckeditor.fields.RichTextField(null=True, verbose_name='text')),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitYear', verbose_name='learning unit year')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference.Language', verbose_name='Language')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('consistency_id', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'unique_together': {('consistency_id', 'learning_unit_year', 'language')},
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.Person')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'verbose_name': 'Tutor',
                'verbose_name_plural': 'Tutors',
            },
        ),
        migrations.CreateModel(
            name='StudentSpecificProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('NOT_DEFINED', 'Not defined'), ('DISABILITY', 'DDI'), ('SPORT', 'Sport'), ('ARTIST', 'Artist'), ('ENTREPRENEUR', 'Entrepreneur'), ('ARRANGEMENT_JURY', 'Educational facilities accepted by Jury')], max_length=20)),
                ('subtype_disability', models.CharField(blank=True, choices=[('REDUCED_MOBILITY', 'Person with reduced mobility'), ('OTHER_DISABILITY', 'Other special needs')], max_length=20, verbose_name='Sub type Disability')),
                ('subtype_sport', models.CharField(blank=True, choices=[('PROMISING_ATHLETE_HL', 'High Level Promising athlete'), ('PROMISING_ATHLETE', 'Promising athlete')], max_length=20, verbose_name='Sub type Sport')),
                ('arrangement_additional_time', models.BooleanField(default=False, verbose_name='Arrangement additional time')),
                ('arrangement_appropriate_copy', models.BooleanField(default=False, verbose_name='Arrangement appropriate copy')),
                ('arrangement_other', models.BooleanField(default=False, verbose_name='Arrangement other')),
                ('arrangement_specific_locale', models.BooleanField(default=False, verbose_name='Arrangement specific locale')),
                ('guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Person', verbose_name='Guide')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.Student')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('arrangement_comment', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Details other educational facilities')),
            ],
            options={
                'ordering': ('student', 'guide__last_name', 'guide__first_name'),
            },
        ),
        migrations.CreateModel(
            name='EntityVersionAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, null=True)),
                ('city', models.CharField(max_length=255)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('street_number', models.CharField(blank=True, max_length=12)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('is_main', models.BooleanField(default=False)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reference.Country')),
                ('entity_version', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.EntityVersion')),
                ('postal_code', models.CharField(blank=True, max_length=32)),
                ('state', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.AddConstraint(
            model_name='entityversionaddress',
            constraint=models.UniqueConstraint(condition=models.Q(is_main=True), fields=('entity_version',), name='unique_main_address'),
        ),
    ]

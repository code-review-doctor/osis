# Generated by Django 2.2.13 on 2021-08-31 10:20

from django.db import migrations
from django.db.models import OuterRef, Exists

ACADEMIC_YEAR = 2021


def get_program_managers_of_education_group_year_11ba(apps):
    EducationGroupYear = apps.get_model("base", "EducationGroupYear")
    ProgramManager = apps.get_model("base", "ProgramManager")

    education_group_year_subqs = EducationGroupYear.objects.filter(
        academic_year__year=ACADEMIC_YEAR,
        acronym__icontains="11BA",
        education_group=OuterRef("education_group")
    )
    return ProgramManager.objects.annotate(
        of_first_year_bachelor=Exists(education_group_year_subqs)
    ).filter(
        of_first_year_bachelor=True
    )


def get_bachelor_education_group(apps):
    EducationGroupYear = apps.get_model("base", "EducationGroupYear")
    return EducationGroupYear.objects.filter(
        academic_year__year=ACADEMIC_YEAR,
        education_group_type__name="BACHELOR"
    ).values(
        "education_group",
        "acronym"
    )


def create_program_manager_for_cohort(
        apps,
        old_program_manager,
        dict_acronym_by_education_group,
        dict_education_group_by_acronym
):
    ProgramManager = apps.get_model("base", "ProgramManager")
    obj, created = ProgramManager.objects.get_or_create(
        education_group_id=get_corresponding_1ba_education_group(
            old_program_manager.education_group,
            dict_acronym_by_education_group,
            dict_education_group_by_acronym
        ),
        cohort="FIRST_YEAR",
        person=old_program_manager.person,
        defaults={
            'external_id': old_program_manager.external_id,
            'is_main': old_program_manager.is_main,
        }
    )
    return obj


def get_corresponding_1ba_education_group(
        education_group_11ba,
        dict_acronym_by_education_group,
        dict_education_group_by_acronym
):
    acronym_11ba = dict_acronym_by_education_group[education_group_11ba.id]
    education_group_1ba = dict_education_group_by_acronym[acronym_11ba.replace('11BA', '1BA')]
    return education_group_1ba


def create_program_manager_for_cohort_11ba(apps, schema_editor):
    print("Create program manager for cohort 11ba")
    program_managers_of_old_model = get_program_managers_of_education_group_year_11ba(apps)
    bachelors_education_group = get_bachelor_education_group(apps)
    dict_acronym_by_education_group = {row["education_group"]: row["acronym"] for row in bachelors_education_group}
    dict_education_group_by_acronym = {row["acronym"]: row["education_group"] for row in bachelors_education_group}

    for old_program_manager in program_managers_of_old_model:
        new_program_manager = create_program_manager_for_cohort(
            apps,
            old_program_manager,
            dict_acronym_by_education_group,
            dict_education_group_by_acronym
        )
        print("- old: {}  new: ".format(old_program_manager.id, new_program_manager.id))


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0601_auto_20210910_1306'),
    ]

    operations = [
        migrations.RunPython(
            create_program_manager_for_cohort_11ba
        ),
    ]

# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-06-08 12:18
from __future__ import unicode_literals

from django.contrib.auth.management import create_permissions
from django.db import migrations


def add_administrators_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    administrators_group, created = Group.objects.get_or_create(name='administrators')
    if created:
        is_admin_perm = Permission.objects.get(codename='is_administrator')
        administrators_group.permissions.add(is_admin_perm)


def add_tutors_group(apps, schema_editor):
    # create group
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    tutors_group, created = Group.objects.get_or_create(name='tutors')
    if created:
        # Add permissions to group
        catalog_perm = Permission.objects.get(codename='can_access_catalog')
        offer_perm = Permission.objects.get(codename='can_access_offer')
        student_path_perm = Permission.objects.get(codename='can_access_student_path')
        evaluation_perm = Permission.objects.get(codename='can_access_evaluation')
        score_encoding_perm = Permission.objects.get(codename='can_access_scoreencoding')
        tutors_group.permissions.add(
            catalog_perm,
            student_path_perm,
            offer_perm,
            evaluation_perm,
            score_encoding_perm
        )


def add_pgm_managers_group(apps, schema_editor):
    # create group
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    pgm_managers_group, created = Group.objects.get_or_create(name='program_managers')
    if created:
        # Add permissions to group
        catalog_perm = Permission.objects.get(codename='can_access_catalog')
        offer_perm = Permission.objects.get(codename='can_access_offer')
        student_path_perm = Permission.objects.get(codename='can_access_student_path')
        evaluation_perm = Permission.objects.get(codename='can_access_evaluation')
        score_encoding_perm = Permission.objects.get(codename='can_access_scoreencoding')
        academic_year_perm = Permission.objects.get(codename='can_access_academicyear')
        academic_calendar_perm = Permission.objects.get(codename='can_access_academic_calendar')
        pgm_managers_group.permissions.add(
            catalog_perm,
            student_path_perm,
            offer_perm,
            evaluation_perm,
            score_encoding_perm,
            academic_year_perm,
            academic_calendar_perm
        )


def add_students_group(apps, schema_editor):
    # create group
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    student_group, created = Group.objects.get_or_create(name='students')
    if created:
        # Add permissions to group
        student_path_perm = Permission.objects.get(codename='can_access_student_path')
        student_group.permissions.add(student_path_perm)


def add_init_institution_administration_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    inst_administrators_group, created = Group.objects.get_or_create(name='institution_administration')
    if created:
        is_inst_admin_perm = Permission.objects.get(codename='is_institution_administrator')
        organisation_perm = Permission.objects.get(codename='can_access_organization')
        structure_perm = Permission.objects.get(codename='can_access_structure')
        inst_administrators_group.permissions.add(is_inst_admin_perm, organisation_perm, structure_perm)


def migrate_permissions(apps, schema_editor):
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0056_create_permissions'),
        ('contenttypes', '__latest__'),
        # We call explicitly emit_post_migrate_signal and contrib.sites have some post_migration,
        # so we must ensure that tables of app sites is correctly created
        ('sites', '__latest__'),
    ]

    operations = [
        migrations.RunPython(migrate_permissions, elidable=True),
        migrations.RunPython(add_administrators_group, elidable=True),
        migrations.RunPython(add_tutors_group, elidable=True),
        migrations.RunPython(add_pgm_managers_group, elidable=True),
        migrations.RunPython(add_students_group, elidable=True),
        migrations.RunPython(add_init_institution_administration_group, elidable=True)
    ]

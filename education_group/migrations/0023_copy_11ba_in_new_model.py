# Generated by Django 2.2.13 on 2021-06-01 06:20
import re

from django.db import migrations

BAC_CODE = '1BA'


def remove_11ba_in_cohort_year(apps, shema_editor):
    CohortYear = apps.get_model('education_group', 'cohortyear')
    EducationGroupYear = apps.get_model('base', 'educationgroupyear')

    all_11bas = EducationGroupYear.objects.filter(acronym__endswith='11BA')
    pattern_11ba = re.compile(r'11BA')
    corresponding_trainings = []
    for my_11ba in all_11bas:
        acronym_1ba = pattern_11ba.sub(BAC_CODE, my_11ba.acronym)
        corresponding_trainings.append(
            EducationGroupYear.objects.get(
                acronym=acronym_1ba,
                academic_year=my_11ba.academic_year
            )
        )
    CohortYear.objects.filter(
        education_group_year__in=corresponding_trainings,
        name='FIRST_YEAR'
    ).delete()


def create_11ba_in_cohort_year(apps, shema_editor):
    CohortYear = apps.get_model('education_group', 'cohortyear')
    EducationGroupYear = apps.get_model('base', 'educationgroupyear')

    all_11bas = EducationGroupYear.objects.filter(acronym__endswith='11BA')
    pattern_11ba = re.compile(r'11BA')
    for my_11ba in all_11bas:
        acronym_1ba = pattern_11ba.sub(BAC_CODE, my_11ba.acronym)
        corresponding_training = EducationGroupYear.objects.get(
            acronym=acronym_1ba,
            academic_year=my_11ba.academic_year
        )
        if corresponding_training.administration_entity == my_11ba.administration_entity:
            administration_entity = None
        else:
            administration_entity = my_11ba.administration_entity
        CohortYear.objects.update_or_create(
            education_group_year=corresponding_training,
            name='FIRST_YEAR',
            defaults={
                "administration_entity": administration_entity,
            }
        )


def update_vete1ba(apps, shema_editor):
    EducationGroupYear = apps.get_model('base', 'educationgroupyear')

    all_11bas = EducationGroupYear.objects.filter(acronym__endswith='VETE11BA')
    pattern_11ba = re.compile(r'11BA')
    for my_11ba in all_11bas:
        acronym_1ba = pattern_11ba.sub(BAC_CODE, my_11ba.acronym)
        corresponding_training = EducationGroupYear.objects.get(
            acronym=acronym_1ba,
            academic_year=my_11ba.academic_year
        )
        corresponding_training.partial_deliberation = my_11ba.partial_deliberation
        corresponding_training.admission_exam = my_11ba.admission_exam
        corresponding_training.save()


class Migration(migrations.Migration):

    dependencies = [
        ('education_group', '0022_auto_20210531_1115'),
    ]

    operations = [
        migrations.RunPython(create_11ba_in_cohort_year, remove_11ba_in_cohort_year),
        migrations.RunPython(update_vete1ba, migrations.RunPython.noop),
    ]

# Generated by Django 2.2.24 on 2022-02-03 09:23
import re
from typing import Dict, List

from django.db import migrations
from django.db.models import Q, OuterRef, Exists, CharField, Value, When, Case
from openpyxl import load_workbook

from base.models.enums.education_group_categories import GROUP
from education_group.models.group_year import GroupYear

CURRENT_ACADEMIC_YEAR = 2021


def main(apps, schema_editor):
    groups = GroupYear.objects.filter(
        education_group_type__category=GROUP,
        academic_year__year__gte=CURRENT_ACADEMIC_YEAR,
        academic_year__year__lte=CURRENT_ACADEMIC_YEAR + 1
    )

    # Managing 2021-22
    print(CURRENT_ACADEMIC_YEAR)
    existing_codes = list(groups.filter(academic_year__year=CURRENT_ACADEMIC_YEAR).values_list(
        'partial_acronym', flat=True
    ))
    wanted_codes = get_wanted_codes(
        academic_year='{}-{}'.format(CURRENT_ACADEMIC_YEAR, str(CURRENT_ACADEMIC_YEAR + 1)[2:])
    )
    current_problematic_gys = groups.filter(
        academic_year__year=CURRENT_ACADEMIC_YEAR,
        partial_acronym__iregex=r'\d{4,6}'
    ).annotate(
        wanted_code=Case(
            *[When(partial_acronym=k, then=Value(v)) for k, v in wanted_codes.items()],
            output_field=CharField()
        )
    ).annotate(
        existing_wanted_code=Exists(
            groups.filter(
                academic_year__year=CURRENT_ACADEMIC_YEAR,
                partial_acronym=OuterRef('wanted_code')
            )
        )
    )
    print("Managing {} groups in 2021-22".format(current_problematic_gys.count()))
    for group in current_problematic_gys.filter(wanted_code__isnull=False, existing_wanted_code=False):
        print("Group {} renamed into {}".format(group.partial_acronym, group.wanted_code))
        group.partial_acronym = group.wanted_code
        group.save()
    other_groups = current_problematic_gys.filter(
        (Q(wanted_code__isnull=False) & Q(existing_wanted_code=True)) | Q(wanted_code__isnull=True)
    )
    for group in other_groups:
        new_code = manage_generate_code_from_other_one(existing_codes, group)
        existing_codes.append(new_code)
        group.partial_acronym = new_code
        group.save()

    # Managing 2022-23 and future
    print(CURRENT_ACADEMIC_YEAR + 1)
    existing_codes = list(groups.filter(academic_year__year=CURRENT_ACADEMIC_YEAR + 1).values_list(
        'partial_acronym', flat=True
    ))
    wanted_codes = get_wanted_codes(
        academic_year='{}-{}'.format(CURRENT_ACADEMIC_YEAR + 1, str(CURRENT_ACADEMIC_YEAR + 2)[2:]))
    current_problematic_gys = groups.filter(
        academic_year__year=CURRENT_ACADEMIC_YEAR + 1,
        partial_acronym__iregex=r'\d{4,6}'
    ).annotate(
        wanted_code=Case(
            *[When(partial_acronym=k, then=Value(v)) for k, v in wanted_codes.items()],
            output_field=CharField()
        )
    ).annotate(
        existing_wanted_code=Exists(
            groups.filter(
                academic_year__year=CURRENT_ACADEMIC_YEAR + 1,
                partial_acronym=OuterRef('wanted_code')
            )
        )
    )
    print("Managing {} groups in 2022-23".format(current_problematic_gys.count()))
    for group in current_problematic_gys.filter(wanted_code__isnull=False, existing_wanted_code=False):
        print("Group {} renamed into {}".format(group.partial_acronym, group.wanted_code))
        group.partial_acronym = group.wanted_code
        next_groups = group.group.groupyear_set.filter(academic_year__year__gt=CURRENT_ACADEMIC_YEAR + 1)
        print("Managing {} next years".format(next_groups.count()))
        next_groups.update(partial_acronym=group.wanted_code)
        group.save()

    other_groups = current_problematic_gys.filter(
        (Q(wanted_code__isnull=False) & Q(existing_wanted_code=True)) | Q(wanted_code__isnull=True)
    )
    for group in other_groups:
        new_code = manage_generate_code_from_other_one(existing_codes, group)
        existing_codes.append(new_code)
        group.partial_acronym = new_code
        next_groups = group.group.groupyear_set.filter(academic_year__year__gt=CURRENT_ACADEMIC_YEAR + 1)
        next_groups.update(partial_acronym=new_code)
        group.save()


def manage_generate_code_from_other_one(existing_codes: List[str], group) -> str:
    wanted_code = getattr(group, 'wanted_code')
    generated_code = generate_new_code_from_old(
        base_code=wanted_code if wanted_code else group.partial_acronym,
        existing_codes=existing_codes
    )
    if wanted_code:
        print("Group {} had to be renamed into {} but already existing --- Generated Code : {}".format(
            group.partial_acronym,
            wanted_code,
            generated_code
        ))
    else:
        print("Group {} renamed into generated code : {}".format(
            group.partial_acronym,
            generated_code
        ))
    return generate_new_code_from_old(wanted_code if wanted_code else group.partial_acronym, existing_codes)


def generate_new_code_from_old(base_code: str, existing_codes: List[str]) -> str:
    match_regex_numeric_part = re.search(r"\d+", base_code)
    start, end = match_regex_numeric_part.start(), match_regex_numeric_part.end()
    numeric_part = max(int(base_code[start:start + 3]), 100)  # OSIS-5792 to ensure numeric part does not begin with 0

    code_generated = "{}{}{}".format(base_code[:start], str(numeric_part), base_code[end:])
    while code_generated in existing_codes:
        numeric_part += 1
        code_generated = "{}{}{}".format(code_generated[:start], str(numeric_part), code_generated[start + 3:])
    return code_generated


def get_wanted_codes(academic_year: str) -> Dict[str, str]:
    wb = load_workbook(filename='3toclean.xlsx')
    sheet_ranges = wb[academic_year]
    wanted_codes = {}
    for i in range(1, sheet_ranges.max_row):
        cell_obj = sheet_ranges.rows[i]
        old_code, new_code = cell_obj[1].value, cell_obj[3].value
        if cell_obj[3].value:
            wanted_codes[old_code] = new_code
    return wanted_codes


class Migration(migrations.Migration):
    dependencies = [
        ('education_group', '0023_copy_11ba_in_new_model'),
    ]

    operations = [
        migrations.RunPython(main)
    ]
